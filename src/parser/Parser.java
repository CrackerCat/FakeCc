/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;
import ast.*;
import entity.*;
import type.*;
import asm.Label;
import utils.ErrorHandler;
import exception.*;
import java.lang.reflect.*;
import java.util.*;
import java.io.*;

public class Parser implements ParserConstants {
        private String sourceName;//解析的文件名
        private Set<String> knownTypedefs;//用户声明的类型
        private LibraryLoader loader;//用来加载import文件的类
        private ErrorHandler errorHandler;
         static final public String SOURCE_ENCODING = "UTF-8";//源文件的编码格式
        protected Location location(Token t){
                return new Location(sourceName,t);
        }
        //构造函数
        public Parser(Reader s,String filename,LibraryLoader loader,ErrorHandler errorHandler,boolean debug) {
          this(s);
          this.loader=loader;
          this.errorHandler=errorHandler;
          this.sourceName=filename;
          this.knownTypedefs=new HashSet<String >();
          if(debug) {
            enable_tracing();//启动跟踪功能
          }else {
            disable_tracing();
          }
        }
        //解析一个指定声明文件的调用
        static public Declarations parseDeclFile(File file,
                                             LibraryLoader loader,
                                             ErrorHandler errorHandler)
                                             throws SyntaxException,
                                                    FileException {
        return parseDeclFile(file, loader, errorHandler, false);
    }

    static public Declarations parseDeclFile(File file,
                                             LibraryLoader loader,
                                             ErrorHandler errorHandler,
                                             boolean debug)
                                             throws SyntaxException,
                                                    FileException {
        return newFileParser(file, loader, errorHandler, debug).parseDecls();
    }
        //用来解析当前文件为声明文件的调用,返回一个Declarations对象
         public Declarations parseDecls() throws SyntaxException {
        try {
            return declaration_file();
        }
        catch (TokenMgrError ex) {
            throw new SyntaxException(ex.getMessage());
        }
        catch (ParseException ex) {
            throw new SyntaxException(ex.getMessage());
        }
    }
    //用来解析当前文件是源文件的调用,返回一个AST对象
    public AST parse() throws SyntaxException {
        try {
            return compilation_unit();
        }
        catch (TokenMgrError err) {
            throw new SyntaxException(err.getMessage());
        }
        catch (ParseException ex) {
            throw new SyntaxException(ex.getMessage());
        }

    }
    //解析一个指定源文件的调用
     static public AST parseFile(File file, LibraryLoader loader,
                                ErrorHandler errorHandler)
                                throws SyntaxException, FileException {
        return parseFile(file, loader, errorHandler, false);
    }

    // #@@range/parseFile{
    static public AST parseFile(File file, LibraryLoader loader,
                                ErrorHandler errorHandler, boolean debug)
                                throws SyntaxException, FileException {
        return newFileParser(file, loader, errorHandler, debug).parse();
    }

    //创建一个Parser类
     static public Parser newFileParser(String name,
                                       LibraryLoader loader,
                                       ErrorHandler errorHandler,
                                       boolean debug)
                                       throws FileException {
                             return newFileParser(new File(name),loader,errorHandler,debug);
                           }

     static public Parser newFileParser(File file,
                                       LibraryLoader loader,
                                       ErrorHandler errorHandler,
                                       boolean debug)
                                       throws FileException {
        try {
            BufferedReader r =
                new BufferedReader(new FileReader(file));
            return new Parser(r, file.getPath(), loader, errorHandler, debug);
        }
        catch (FileNotFoundException ex) {
            throw new FileException(ex.getMessage());
        }

    }

        //将声明的类型添加到用来存储的set中.
        private void addKnownTypedefs(List<TypedefNode> typedefs) {
        for (TypedefNode n : typedefs) {
            addType(n.name());
        }
    }
        private boolean isType(String name) {
        return knownTypedefs.contains(name);
    }
    private void addType(String name) {
        knownTypedefs.add(name);
    }
        //解析代码中数值的文本image,并用适当的参数生成IntegerLiteralNode,一个整数有四种,uint,int,ulong,long
        IntegerLiteralNode integerNode(Location loc,String image){
                long i=integerValue(image);
        if (image.endsWith("UL")) {
            return new IntegerLiteralNode(loc, IntegerTypeRef.ulongRef(), i);
        }
        else if (image.endsWith("L")) {
            return new IntegerLiteralNode(loc, IntegerTypeRef.longRef(), i);
        }
        else if (image.endsWith("U")) {
            return new IntegerLiteralNode(loc, IntegerTypeRef.uintRef(), i);
        }
        else {
            return new IntegerLiteralNode(loc, IntegerTypeRef.intRef(), i);
        }
        }
        //
         private TypeRef size_t() {
        return IntegerTypeRef.ulongRef();
    }
        //将一个整数的字面值转换为一个long类型,可能有8进制或16进制
        private long integerValue(String image){
                String s=image.replaceFirst("[UL]","");//去除ul标志
                if(s.startsWith("0")&&!s.equals("0")){
                        return Long.parseLong(s.substring(1),8);
                }else if(s.startsWith("0x")||s.startsWith("0X")){
                        return Long.parseLong(s.substring(2),16);
                }else{
                        return Long.parseLong(s,10);
                }
        }
        //字符串字面值转成一个字符串对象(这段可用正则表达式改写)
        String stringValue(String _image)throws ParseException{
                 //首先去除首尾的"
                 String image= _image.substring(1,_image.length()-1);
                 int pos=0;
                 int idx=0;
                 StringBuilder buff=new StringBuilder();
                 //判断有转义字符的情况
                 while((idx=image.indexOf("//"))>=0){
                        buff.append(image.substring(pos,idx));
                        if((image.length()>=idx+4)
                                && Character.isDigit(image.charAt(idx+1))
                                && Character.isDigit(image.charAt(idx+2))
                                && Character.isDigit(image.charAt(idx+3))) {
                                buff.append(unescapeOctal(image.substring(idx+1,idx+4)));
                                pos=idx+4;
                        }
                        else{
                                buff.append(unescapeSeq(image.charAt(idx+1)));
                                pos=idx+2;
                        }
                 }
                if(pos<image.length())
                        buff.append(image.substring(pos));
                return buff.toString();
        }
        //转义数值转成char
        private char unescapeOctal(String digits)throws ParseException{
                final int CHARMAX=255;
                int i=Integer.parseInt(digits,8);
                if(i>CHARMAX){
                        throw new ParseException("octal character sequence too big :" +digits);
                }
                return (char)i;
        }
        //转移字符转成char
        private final char bell=7;
        private final char backspace='\u005cb';
        private final char escape=27;
        private final char vt=11;
        private char unescapeSeq(char c)throws ParseException{
          switch(c) {
                case '0': return '\u005c0';
        case '"': return '"';
        case '\u005c'': return '\u005c'';
        case 'a': return bell;
        case 'b': return backspace;
        case 'e': return escape;
        case 'f': return '\u005cf';
        case 'n': return '\u005cn';
        case 'r': return '\u005cr';
        case 't': return '\u005ct';
        case 'v': return vt;
        default:
            throw new ParseException("unknown escape sequence: \u005c"\u005c\u005c" + c);
          }
    }
        //字符字面量转成字符的数值
        private long characterCode(String image)throws ParseException{
                String str=stringValue(image);
                if(str.length()!=1){
                        throw new Error("character length not equal 1");
                }
                return (long)str.charAt(0);
        }

                                                       // rule5

/*
下面是语法描述
*/
//一个编译单位,即一个文件的总体规则,import语句+函数或类型定义+文件结尾
  final public AST compilation_unit() throws ParseException {
    trace_call("compilation_unit");
    try {
        Token t;
        Declarations impdecls,decls;
                t=getToken(1);//这个方法是JavaCC预定义在Parser类中的方法,可以得到一个token

      impdecls = import_stmts();
      decls = top_defs();
      jj_consume_token(0);
                        decls.add(impdecls); //两者先和并.
                        {if (true) return new AST(location(t),decls);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("compilation_unit");
    }
  }

//多个import行,每个行用loader加载器加载得到一个Declarations,然后用impdecls合并所有的import.
  final public Declarations import_stmts() throws ParseException {
    trace_call("import_stmts");
    try {
        Declarations impdecls=new Declarations();
        String libid=null;
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        libid = import_stmt();
                        try{
                                        Declarations decls=loader.loadLibrary(libid,errorHandler);
                                        if(decls!=null){
                                                impdecls.add(decls);
                                                addKnownTypedefs(decls.typedefs());
                                        }
                                }catch(CompileException e){
                                        {if (true) throw new ParseException(e.getMessage());}
                                }
      }
             {if (true) return impdecls;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("import_stmts");
    }
  }

//一个import行的语法
  final public String import_stmt() throws ParseException {
    trace_call("import_stmt");
    try {
        StringBuilder name=new StringBuilder();
        String s;
      jj_consume_token(IMPORT);
      s = name();
                           name.append(s);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 49:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(49);
        s = name();
                       name.append("."+s);
      }
      jj_consume_token(50);
                        {if (true) return name.toString();}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("import_stmt");
    }
  }

//解析声明文件的语法
  final public Declarations declaration_file() throws ParseException {
    trace_call("declaration_file");
    try {
    Declarations impdecls, decls = new Declarations();
    UndefinedFunction funcdecl;
    UndefinedVariable vardecl;
    Constant defconst;
    StructNode defstruct;
    UnionNode defunion;
    TypedefNode typedef;
      impdecls = import_stmts();
            decls.add(impdecls);
      label_3:
      while (true) {
        if (jj_2_1(1)) {
          ;
        } else {
          break label_3;
        }
        if (jj_2_2(2147483647)) {
          funcdecl = funcdecl();
                              decls.addFuncdecl(funcdecl);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXTERN:
            vardecl = vardecl();
                              decls.addVardecl(vardecl);
            break;
          case CONST:
            defconst = defconst();
                              decls.addConstant(defconst);
            break;
          case STRUCT:
            defstruct = defstruct();
                              decls.addDefstruct(defstruct);
            break;
          case UNION:
            defunion = defunion();
                              decls.addDefunion(defunion);
            break;
          case TYPEDEF:
            typedef = typedef();
                              decls.addTypedef(typedef);
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(0);
            {if (true) return decls;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaration_file");
    }
  }

//import中声明的语法
//声明的函数
  final public UndefinedFunction funcdecl() throws ParseException {
    trace_call("funcdecl");
    try {
  TypeRef tr;
  String name;
  Params params;
      tr = typeref();
      name = name();
      params = params();
                FunctionTypeRef t=new FunctionTypeRef(tr,params.paramsTypeRef());
                {if (true) return new UndefinedFunction(new TypeNode(t),name,params);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("funcdecl");
    }
  }

//声明的变量
  final public UndefinedVariable vardecl() throws ParseException {
    trace_call("vardecl");
    try {
        TypeRef tr;
        String name;
      jj_consume_token(EXTERN);
      tr = typeref();
      name = name();
          {if (true) return        new UndefinedVariable(new TypeNode(tr),name);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("vardecl");
    }
  }

//与<INDENTIFIER>等价
  final public String name() throws ParseException {
    trace_call("name");
    try {
        Token t;
      t = jj_consume_token(IDENTIFIER);
                        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("name");
    }
  }

//定义的语法规则,这里函数定义和变量定义必须超前扫描到形参列表的左括号出现才能确定.结构体和变量也需要读到第3个字符才能区分
//这个Declarations类是用来保存所有定义的类型的类,传给AST类当参数构建根节点.
  final public Declarations top_defs() throws ParseException {
    trace_call("top_defs");
    try {
        Declarations decls=new Declarations();
        DefinedFunction defun;
        List<DefinedVariable> defvars;
        Constant defconst;
        StructNode      defstruct;
        UnionNode defunion;
        TypedefNode deftype;
      label_4:
      while (true) {
        if (jj_2_3(1)) {
          ;
        } else {
          break label_4;
        }
        if (jj_2_4(2147483647)) {
          defun = defun();
                 decls.addDefun(defun);
        } else if (jj_2_5(3)) {
          defvars = defvars();
                 decls.addDefvars(defvars);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CONST:
            defconst = defconst();
                 decls.addConstant(defconst);
            break;
          case STRUCT:
            defstruct = defstruct();
                 decls.addDefstruct(defstruct);
            break;
          case UNION:
            defunion = defunion();
                 decls.addDefunion(defunion);
            break;
          case TYPEDEF:
            deftype = typedef();
                 decls.addTypedef(deftype);
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
                        {if (true) return decls;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("top_defs");
    }
  }

  final public boolean storage() throws ParseException {
    trace_call("storage");
    try {
        Token t=null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        t = jj_consume_token(STATIC);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
                     {if (true) return (t==null?false:true);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("storage");
    }
  }

  final public DefinedFunction defun() throws ParseException {
    trace_call("defun");
    try {
        boolean priv;
        TypeRef ret;
        String name;
        Params pl;
        BlockNode body;
      priv = storage();
      ret = typeref();
      name = name();
      jj_consume_token(51);
      pl = params();
      jj_consume_token(52);
      body = block();
                        TypeRef t=new FunctionTypeRef(ret,pl.paramsTypeRef());
                        {if (true) return new DefinedFunction(priv,new TypeNode(t),name,pl,body);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("defun");
    }
  }

//priv变量用来判断是否是静态类型.	
  final public List<DefinedVariable> defvars() throws ParseException {
    trace_call("defvars");
    try {
        List<DefinedVariable> defs= new ArrayList<DefinedVariable>();
        boolean priv;
        TypeNode type;
        String name;
        ExprNode init=null;
      priv = storage();
      type = type();
      name = name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        jj_consume_token(53);
        init = expr();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
                        defs.add(new DefinedVariable(priv,type,name,init));
                        init=null;      //这里每次init可能没有被跟新,所以要手动赋为null.

      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        jj_consume_token(54);
        name = name();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 53:
          jj_consume_token(53);
          init = expr();
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
                                                                        defs.add(new DefinedVariable(priv,type,name,init));
                                                                        init=null;
      }
      jj_consume_token(50);
                                {if (true) return defs;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("defvars");
    }
  }

  final public Constant defconst() throws ParseException {
    trace_call("defconst");
    try {
        TypeNode type;
        String name;
        ExprNode value;
      jj_consume_token(CONST);
      type = type();
      name = name();
      jj_consume_token(53);
      value = expr();
      jj_consume_token(50);
                        {if (true) return new Constant(type,name,value);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("defconst");
    }
  }

//函数形参
  final public Params params() throws ParseException {
    trace_call("params");
    try {
        Params p;
        Token t;
      if (jj_2_6(2147483647)) {
        t = jj_consume_token(VOID);
                        {if (true) return new Params(location(t),new ArrayList<Parameter>());}
      } else if (jj_2_7(1)) {
        p = fixedparams();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          jj_consume_token(54);
          jj_consume_token(55);
                            p.acceptVarargs();
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
                {if (true) return p;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("params");
    }
  }

//定长参数,有若干个参数构成
  final public Params fixedparams() throws ParseException {
    trace_call("fixedparams");
    try {
        List<Parameter> lp=new ArrayList<Parameter>();
        Parameter p1,p;
      p1 = param();
                    lp.add(p1);
      label_6:
      while (true) {
        if (jj_2_8(2)) {
          ;
        } else {
          break label_6;
        }
        jj_consume_token(54);
        p = param();
                        lp.add(p);
      }
                        {if (true) return new Params(p1.location(),lp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("fixedparams");
    }
  }

//一个参数语法
  final public Parameter param() throws ParseException {
    trace_call("param");
    try {
        TypeNode type;
        String name;
      type = type();
      name = name();
                        {if (true) return new Parameter(type,name);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("param");
    }
  }

 //函数主体语法格式,变量定义列表+若干语句
  final public BlockNode block() throws ParseException {
    trace_call("block");
    try {
        Token t;
        List<StmtNode> ls;
        List<DefinedVariable> vars;
      t = jj_consume_token(56);
      vars = defvar_list();
      ls = stmts();
      jj_consume_token(57);
                        {if (true) return new BlockNode(location(t),vars,ls);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("block");
    }
  }

 //函数开头的定义变量列表
  final public List<DefinedVariable> defvar_list() throws ParseException {
    trace_call("defvar_list");
    try {
        List<DefinedVariable> list=new ArrayList<DefinedVariable>();
        List<DefinedVariable> vars;
      label_7:
      while (true) {
        if (jj_2_9(1)) {
          ;
        } else {
          break label_7;
        }
        vars = defvars();
                        list.addAll(vars);
      }
                        {if (true) return list;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("defvar_list");
    }
  }

 //结构体定义,只能含有定义的变量.没有方法.
  final public StructNode defstruct() throws ParseException {
    trace_call("defstruct");
    try {
        Token t;
        String name;
        List<Slot> meml=new ArrayList<Slot>();
      t = jj_consume_token(STRUCT);
      name = name();
      meml = member_list();
      jj_consume_token(50);
                        {if (true) return new StructNode(location(t),name,new StructTypeRef(name),meml);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("defstruct");
    }
  }

  final public UnionNode defunion() throws ParseException {
    trace_call("defunion");
    try {
        Token t;
        String name;
        List<Slot> meml=new ArrayList<Slot>();
      t = jj_consume_token(UNION);
      name = name();
      meml = member_list();
      jj_consume_token(50);
                        {if (true) return new UnionNode(location(t),name,new UnionTypeRef(name),meml);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("defunion");
    }
  }

//结构体变量列表,单位一个槽
  final public List<Slot> member_list() throws ParseException {
    trace_call("member_list");
    try {
        Slot st;
        List<Slot> l=new ArrayList<Slot >();
      jj_consume_token(56);
      label_8:
      while (true) {
        if (jj_2_10(1)) {
          ;
        } else {
          break label_8;
        }
        st = slot();
        jj_consume_token(50);
                           l.add(st);
      }
      jj_consume_token(57);
                        {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("member_list");
    }
  }

//Slot 的实质语法和函数参数的语法相同.
  final public Slot slot() throws ParseException {
    trace_call("slot");
    try {
        TypeNode type;
        String name;
      type = type();
      name = name();
                                {if (true) return new Slot(type,name);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("slot");
    }
  }

  final public TypedefNode typedef() throws ParseException {
    trace_call("typedef");
    try {
        Token t;
        TypeRef tr;
        Token newname;
      t = jj_consume_token(TYPEDEF);
      tr = typeref();
      newname = jj_consume_token(IDENTIFIER);
      jj_consume_token(50);
                        addType(newname.image);                 //因为新加入了类型
                        {if (true) return new TypedefNode(location(t),tr,newname.image);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("typedef");
    }
  }

//一个类型
  final public TypeNode type() throws ParseException {
    trace_call("type");
    try {
        TypeRef tr;
      tr = typeref();
                        {if (true) return new TypeNode(tr);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("type");
    }
  }

//变量类型加ref的表示只是声明
  final public TypeRef typeref() throws ParseException {
    trace_call("typeref");
    try {
        TypeRef tr;
        Token t;
        ParamTypeRefs params;
      tr = typeref_base();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 51:
        case 58:
        case 60:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_9;
        }
        if (jj_2_11(2)) {
          jj_consume_token(58);
          jj_consume_token(59);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 58:
            jj_consume_token(58);
            t = jj_consume_token(INTEGER);
            jj_consume_token(59);
                         tr=new ArrayTypeRef(tr,integerValue(t.image)); //递归解析

            break;
          case 60:
            jj_consume_token(60);
                         tr=new PointerTypeRef(tr);
            break;
          case 51:
            jj_consume_token(51);
            params = param_typerefs();
            jj_consume_token(52);
                        tr=new  FunctionTypeRef(tr,params);
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
             {if (true) return tr;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("typeref");
    }
  }

//基本类型的语法
  final public TypeRef typeref_base() throws ParseException {
    trace_call("typeref_base");
    try {
        Token t,name;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        t = jj_consume_token(VOID);
                              {if (true) return new VoidTypeRef(location(t));}
        break;
      case CHAR:
        t = jj_consume_token(CHAR);
                          {if (true) return IntegerTypeRef.charRef(location(t));}
        break;
      case SHORT:
        t = jj_consume_token(SHORT);
                          {if (true) return IntegerTypeRef.shortRef(location(t));}
        break;
      case INT:
        t = jj_consume_token(INT);
                          {if (true) return IntegerTypeRef.intRef(location(t));}
        break;
      case LONG:
        t = jj_consume_token(LONG);
                          {if (true) return IntegerTypeRef.longRef(location(t));}
        break;
      case BOOLEAN:
        t = jj_consume_token(BOOLEAN);
                       {if (true) return IntegerTypeRef.uintRef(location(t));}
        break;
      default:
        jj_la1[11] = jj_gen;
        if (jj_2_12(2)) {
          t = jj_consume_token(UNSIGNED);
          jj_consume_token(INT);
                                                          {if (true) return IntegerTypeRef.uintRef(location(t));}
        } else if (jj_2_13(2)) {
          t = jj_consume_token(UNSIGNED);
          jj_consume_token(SHORT);
                                                           {if (true) return IntegerTypeRef.ushortRef(location(t));}
        } else if (jj_2_14(2)) {
          t = jj_consume_token(UNSIGNED);
          jj_consume_token(LONG);
                                                  {if (true) return IntegerTypeRef.ulongRef(location(t));}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case UNSIGNED:
            t = jj_consume_token(UNSIGNED);
            jj_consume_token(CHAR);
                                          {if (true) return IntegerTypeRef.ucharRef(location(t));}
            break;
          case UNION:
            t = jj_consume_token(UNION);
            name = jj_consume_token(IDENTIFIER);
                                                  {if (true) return new UnionTypeRef(location(t), name.image);}
            break;
          case STRUCT:
            t = jj_consume_token(STRUCT);
            name = jj_consume_token(IDENTIFIER);
                                                  {if (true) return new StructTypeRef(location(t), name.image);}
            break;
          default:
            jj_la1[12] = jj_gen;
            if (isType(getToken(1).image)) {
              name = jj_consume_token(IDENTIFIER);
                  {if (true) return new UserTypeRef(location(name), name.image);}
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("typeref_base");
    }
  }

//函数指针版本的参数类型,只有类型没有名字
  final public ParamTypeRefs param_typerefs() throws ParseException {
    trace_call("param_typerefs");
    try {
        ParamTypeRefs params;
        Token t;
      if (jj_2_15(2147483647)) {
        t = jj_consume_token(VOID);
                        {if (true) return new ParamTypeRefs(new ArrayList<TypeRef>());}
      } else if (jj_2_16(1)) {
        params = fixedparam_typerefs();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          jj_consume_token(54);
          jj_consume_token(55);
                                                  params.acceptVarargs();
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
                        {if (true) return params;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("param_typerefs");
    }
  }

  final public ParamTypeRefs fixedparam_typerefs() throws ParseException {
    trace_call("fixedparam_typerefs");
    try {
        List<TypeRef> lt=new ArrayList<TypeRef >();
        TypeRef tr;
      tr = typeref();
                      lt.add(tr);
      label_10:
      while (true) {
        if (jj_2_17(2)) {
          ;
        } else {
          break label_10;
        }
        jj_consume_token(54);
        tr = typeref();
                        lt.add(tr);
      }
           {if (true) return new ParamTypeRefs(lt);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("fixedparam_typerefs");
    }
  }

//语句语法
  final public List<StmtNode> stmts() throws ParseException {
    trace_call("stmts");
    try {
        StmtNode s;
        List<StmtNode> l=new ArrayList<StmtNode>();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case IF:
        case SWITCH:
        case WHILE:
        case DO:
        case FOR:
        case RETURN:
        case BREAK:
        case CONTINUE:
        case GOTO:
        case SIZEOF:
        case IDENTIFIER:
        case INTEGER:
        case CHARACTER:
        case STRING:
        case 50:
        case 51:
        case 56:
        case 60:
        case 83:
        case 86:
        case 87:
        case 90:
        case 91:
        case 92:
        case 93:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_11;
        }
        s = stmt();
                   l.add(s);
      }
                        {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("stmts");
    }
  }

  final public StmtNode stmt() throws ParseException {
    trace_call("stmt");
    try {
  StmtNode sn=null;
  ExprNode en=null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        jj_consume_token(50);
        break;
      default:
        jj_la1[15] = jj_gen;
        if (jj_2_18(2)) {
          sn = labeled_stmt();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TRUE:
          case FALSE:
          case SIZEOF:
          case IDENTIFIER:
          case INTEGER:
          case CHARACTER:
          case STRING:
          case 51:
          case 60:
          case 83:
          case 86:
          case 87:
          case 90:
          case 91:
          case 92:
          case 93:
            en = expr();
            jj_consume_token(50);
                         sn=new ExprStmtNode(en.location(),en);
            break;
          case 56:
            sn = block();
            break;
          case IF:
            sn = if_stmt();
            break;
          case WHILE:
            sn = while_stmt();
            break;
          case FOR:
            sn = for_stmt();
            break;
          case DO:
            sn = dowhile_stmt();
            break;
          case SWITCH:
            sn = switch_stmt();
            break;
          case BREAK:
            sn = break_stmt();
            break;
          case CONTINUE:
            sn = continue_stmt();
            break;
          case GOTO:
            sn = goto_stmt();
            break;
          case RETURN:
            sn = return_stmt();
            break;
          default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
          {if (true) return sn;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("stmt");
    }
  }

//if语句
  final public IfNode if_stmt() throws ParseException {
    trace_call("if_stmt");
    try {
        Token t;
        ExprNode en;
        StmtNode thenBody;
        StmtNode elseBody=null;
      t = jj_consume_token(IF);
      jj_consume_token(51);
      en = expr();
      jj_consume_token(52);
      thenBody = stmt();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        elseBody = stmt();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
                        {if (true) return new IfNode(location(t),en,thenBody,elseBody);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("if_stmt");
    }
  }

//while语句
  final public WhileNode while_stmt() throws ParseException {
    trace_call("while_stmt");
    try {
        Token t;
        ExprNode cond;
        StmtNode body;
      t = jj_consume_token(WHILE);
      jj_consume_token(51);
      cond = expr();
      jj_consume_token(52);
      body = stmt();
                        {if (true) return new WhileNode(location(t),cond,body);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("while_stmt");
    }
  }

//dowhile语句
  final public DoWhileNode dowhile_stmt() throws ParseException {
    trace_call("dowhile_stmt");
    try {
        Token f;
        ExprNode cond;
        StmtNode body;
      f = jj_consume_token(DO);
      body = stmt();
      jj_consume_token(WHILE);
      jj_consume_token(51);
      cond = expr();
      jj_consume_token(52);
      jj_consume_token(50);
                        {if (true) return new DoWhileNode(location(f),cond,body);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("dowhile_stmt");
    }
  }

//for语句
  final public ForNode for_stmt() throws ParseException {
    trace_call("for_stmt");
    try {
        Token t;
        ExprNode e1,e2,e3;
        StmtNode sn;
      t = jj_consume_token(FOR);
      jj_consume_token(51);
      e1 = expr();
      jj_consume_token(50);
      e2 = expr();
      jj_consume_token(50);
      e3 = expr();
      jj_consume_token(52);
      sn = stmt();
                        {if (true) return new ForNode(location(t),e1,e2,e3,sn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("for_stmt");
    }
  }

//continue语句
  final public ContinueNode continue_stmt() throws ParseException {
    trace_call("continue_stmt");
    try {
        Token t;
      t = jj_consume_token(CONTINUE);
      jj_consume_token(50);
                {if (true) return new ContinueNode(location(t));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("continue_stmt");
    }
  }

//return 语句
  final public ReturnNode return_stmt() throws ParseException {
    trace_call("return_stmt");
    try {
        ExprNode expr=null;
        Token t;
      if (jj_2_19(2)) {
        t = jj_consume_token(RETURN);
        jj_consume_token(50);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURN:
          t = jj_consume_token(RETURN);
          expr = expr();
          jj_consume_token(50);
          {if (true) return new ReturnNode(location(t),expr);}
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("return_stmt");
    }
  }

//break语句
  final public BreakNode break_stmt() throws ParseException {
    trace_call("break_stmt");
    try {
        Token t;
      t = jj_consume_token(BREAK);
      jj_consume_token(50);
                {if (true) return new BreakNode(location(t));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("break_stmt");
    }
  }

// goto语句
  final public GotoNode goto_stmt() throws ParseException {
    trace_call("goto_stmt");
    try {
        Token t1,t2;
      t1 = jj_consume_token(GOTO);
      t2 = jj_consume_token(IDENTIFIER);
      jj_consume_token(50);
                        {if (true) return new GotoNode(location(t1),t2.image);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("goto_stmt");
    }
  }

  final public LabelNode labeled_stmt() throws ParseException {
    trace_call("labeled_stmt");
    try {
        Token t;
        StmtNode sn;
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(61);
      sn = stmt();
                        {if (true) return new LabelNode(location(t),t.image,sn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("labeled_stmt");
    }
  }

//switch语法,分为一个switch语句,加上多条case,一个case是多个表达式条件加上要执行的block.
  final public SwitchNode switch_stmt() throws ParseException {
    trace_call("switch_stmt");
    try {
        Token t;
        ExprNode exp;
        List<CaseNode > cases;
      t = jj_consume_token(SWITCH);
      jj_consume_token(51);
      exp = expr();
      jj_consume_token(52);
      jj_consume_token(56);
      cases = case_clauses();
      jj_consume_token(57);
          {if (true) return new SwitchNode(location(t),exp,cases);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("switch_stmt");
    }
  }

  final public List<CaseNode > case_clauses() throws ParseException {
    trace_call("case_clauses");
    try {
        List<CaseNode >cases=new ArrayList<CaseNode >();
        CaseNode  cas;
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_12;
        }
        cas = case_clause();
                            cases.add(cas);
      }
      cas = default_clause();
                                                                        cases.add(cas);
          {if (true) return cases;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("case_clauses");
    }
  }

  final public CaseNode case_clause() throws ParseException {
    trace_call("case_clause");
    try {
        List<ExprNode >cases;
        BlockNode body;
      cases = cases();
      body = case_body();
                  {if (true) return new CaseNode(body.location(),cases,body);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("case_clause");
    }
  }

  final public List<ExprNode > cases() throws ParseException {
    trace_call("cases");
    try {
        ExprNode n;
        List<ExprNode > cases=new ArrayList<ExprNode >();
      label_13:
      while (true) {
        jj_consume_token(CASE);
        n = primary();
        jj_consume_token(61);
                        cases.add(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_13;
        }
      }
          {if (true) return cases;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("cases");
    }
  }

  final public CaseNode default_clause() throws ParseException {
    trace_call("default_clause");
    try {
        BlockNode body;
      jj_consume_token(DEFAULT_);
      jj_consume_token(61);
      body = case_body();
                        {if (true) return new CaseNode(body.location(),new ArrayList<ExprNode >(),body);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("default_clause");
    }
  }

//每个case下的代码是一个block,而且结尾必须带break.
  final public BlockNode case_body() throws ParseException {
    trace_call("case_body");
    try {
        List<StmtNode> l=new ArrayList<StmtNode>();
        StmtNode n;
      label_14:
      while (true) {
        n = stmt();
                   if(n!=null)l.add(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case IF:
        case SWITCH:
        case WHILE:
        case DO:
        case FOR:
        case RETURN:
        case BREAK:
        case CONTINUE:
        case GOTO:
        case SIZEOF:
        case IDENTIFIER:
        case INTEGER:
        case CHARACTER:
        case STRING:
        case 50:
        case 51:
        case 56:
        case 60:
        case 83:
        case 86:
        case 87:
        case 90:
        case 91:
        case 92:
        case 93:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_14;
        }
      }
                        if(!(l.get(l.size()-1) instanceof BreakNode)){
                                {if (true) throw new ParseException("missing break statememt");}
                        }
                        {if (true) return new BlockNode(l.get(0).location(),new ArrayList<DefinedVariable>(),l);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("case_body");
    }
  }

//最小的符号
  final public ExprNode primary() throws ParseException {
    trace_call("primary");
    try {
        Token t;
        ExprNode exp;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
                     {if (true) return integerNode(location(t),t.image);}
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
                        {if (true) return integerNode(location(t),"1") ;}
        break;
      case TRUE:
        t = jj_consume_token(TRUE);
                       {if (true) return integerNode(location(t),"0") ;}
        break;
      case CHARACTER:
        t = jj_consume_token(CHARACTER);
                        {if (true) return new IntegerLiteralNode(location(t),IntegerTypeRef.charRef(),characterCode(t.image));}
        break;
      case STRING:
        t = jj_consume_token(STRING);
                     {if (true) return new StringLiteralNode(location(t),
                        new PointerTypeRef(IntegerTypeRef.charRef()),stringValue(t.image));}
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                          {if (true) return new VariableNode(location(t),t.image) ;}
        break;
      case 51:
        jj_consume_token(51);
        exp = expr();
        jj_consume_token(52);
                             {if (true) return exp;}
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("primary");
    }
  }

//expr+0-9数字表示优先级不同的表达式,数字越低优先级越高
  final public ExprNode expr() throws ParseException {
    trace_call("expr");
    try {
        ExprNode l;
        ExprNode r;
        ExprNode expr;
        String op;
      if (jj_2_20(2147483647)) {
        l = term();
        jj_consume_token(53);
        r = expr();
                 {if (true) return new AssignNode(l,r);}
      } else if (jj_2_21(2147483647)) {
        l = term();
        op = opassign_op();
        r = expr();
                 {if (true) return new OpAssignNode(l,r,op);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case SIZEOF:
        case IDENTIFIER:
        case INTEGER:
        case CHARACTER:
        case STRING:
        case 51:
        case 60:
        case 83:
        case 86:
        case 87:
        case 90:
        case 91:
        case 92:
        case 93:
          expr = expr10();
                        {if (true) return expr;}
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr");
    }
  }

//自我赋值运算符语法
  final public String opassign_op() throws ParseException {
    trace_call("opassign_op");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 62:
        jj_consume_token(62);
                 {if (true) return "+=";}
        break;
      case 63:
        jj_consume_token(63);
               {if (true) return "-=";}
        break;
      case 64:
        jj_consume_token(64);
               {if (true) return "*=";}
        break;
      case 65:
        jj_consume_token(65);
               {if (true) return "/=";}
        break;
      case 66:
        jj_consume_token(66);
               {if (true) return "%=";}
        break;
      case 67:
        jj_consume_token(67);
               {if (true) return "&=";}
        break;
      case 68:
        jj_consume_token(68);
               {if (true) return "|=";}
        break;
      case 69:
        jj_consume_token(69);
               {if (true) return "^=";}
        break;
      case 70:
        jj_consume_token(70);
                {if (true) return "<<=";}
        break;
      case 71:
        jj_consume_token(71);
                {if (true) return ">>=";}
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("opassign_op");
    }
  }

//一系列优先级表达式,优先级低的只能包含比他高的或相同优先级的表达式.从上而下的分割
//条件运算符
  final public ExprNode expr10() throws ParseException {
    trace_call("expr10");
    try {
        ExprNode n,t,e;
      n = expr9();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 72:
        jj_consume_token(72);
        t = expr10();
        jj_consume_token(61);
        e = expr10();
                                                 {if (true) return new CondExprNode(n,t,e);}
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
                 {if (true) return n;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr10");
    }
  }

//下面都是二元运算符,优先级参考优先级表
  final public ExprNode expr9() throws ParseException {
    trace_call("expr9");
    try {
  ExprNode l, r;
      l = expr8();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 73:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_15;
        }
        jj_consume_token(73);
        r = expr8();
                                l = new BinaryOpNode(l,"||", r);
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr9");
    }
  }

  final public ExprNode expr8() throws ParseException {
    trace_call("expr8");
    try {
  ExprNode l, r;
      l = expr7();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 74:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_16;
        }
        jj_consume_token(74);
        r = expr7();
                                l = new BinaryOpNode(l,"&&",r);
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr8");
    }
  }

  final public ExprNode expr7() throws ParseException {
    trace_call("expr7");
    try {
  ExprNode l, r;
      l = expr6();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_17;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 75:
          jj_consume_token(75);
          r = expr6();
                                 l = new BinaryOpNode(l, ">", r);
          break;
        case 76:
          jj_consume_token(76);
          r = expr6();
                                 l = new BinaryOpNode(l, "<", r);
          break;
        case 77:
          jj_consume_token(77);
          r = expr6();
                                 l = new BinaryOpNode(l, ">=", r);
          break;
        case 78:
          jj_consume_token(78);
          r = expr6();
                                 l = new BinaryOpNode(l, "<=", r);
          break;
        case 79:
          jj_consume_token(79);
          r = expr6();
                                 l = new BinaryOpNode(l, "==", r);
          break;
        case 80:
          jj_consume_token(80);
          r = expr6();
                                 l = new BinaryOpNode(l, "!=", r);
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr7");
    }
  }

  final public ExprNode expr6() throws ParseException {
    trace_call("expr6");
    try {
  ExprNode l, r;
      l = expr5();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 81:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_18;
        }
        jj_consume_token(81);
        r = expr5();
                               l = new BinaryOpNode(l, "|", r);
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr6");
    }
  }

  final public ExprNode expr5() throws ParseException {
    trace_call("expr5");
    try {
  ExprNode l, r;
      l = expr4();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 82:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_19;
        }
        jj_consume_token(82);
        r = expr4();
                               l = new BinaryOpNode(l, "^", r);
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr5");
    }
  }

  final public ExprNode expr4() throws ParseException {
    trace_call("expr4");
    try {
  ExprNode l, r;
      l = expr3();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_20;
        }
        jj_consume_token(83);
        r = expr3();
                               l = new BinaryOpNode(l, "&", r);
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr4");
    }
  }

  final public ExprNode expr3() throws ParseException {
    trace_call("expr3");
    try {
  ExprNode l, r;
      l = expr2();
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 84:
        case 85:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_21;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 84:
          jj_consume_token(84);
          r = expr2();
                                 l = new BinaryOpNode(l, ">>", r);
          break;
        case 85:
          jj_consume_token(85);
          r = expr2();
                                 l = new BinaryOpNode(l, "<<", r);
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr3");
    }
  }

  final public ExprNode expr2() throws ParseException {
    trace_call("expr2");
    try {
  ExprNode l, r;
      l = expr1();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 86:
        case 87:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_22;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 86:
          jj_consume_token(86);
          r = expr1();
                                l = new BinaryOpNode(l, "+", r);
          break;
        case 87:
          jj_consume_token(87);
          r = expr1();
                                l = new BinaryOpNode(l, "-", r);
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr2");
    }
  }

  final public ExprNode expr1() throws ParseException {
    trace_call("expr1");
    try {
  ExprNode l, r;
      l = term();
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 60:
        case 88:
        case 89:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_23;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 60:
          jj_consume_token(60);
          r = term();
                              l = new BinaryOpNode(l, "*", r);
          break;
        case 88:
          jj_consume_token(88);
          r = term();
                              l = new BinaryOpNode(l, "/", r);
          break;
        case 89:
          jj_consume_token(89);
          r = term();
                              l = new BinaryOpNode(l, "%", r);
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr1");
    }
  }

//项的语法
  final public ExprNode term() throws ParseException {
    trace_call("term");
    try {
        TypeNode t;
        ExprNode n;
      if (jj_2_22(2147483647)) {
        jj_consume_token(51);
        t = type();
        jj_consume_token(52);
        n = term();
                 {if (true) return new CastNode(t,n);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case SIZEOF:
        case IDENTIFIER:
        case INTEGER:
        case CHARACTER:
        case STRING:
        case 51:
        case 60:
        case 83:
        case 86:
        case 87:
        case 90:
        case 91:
        case 92:
        case 93:
          n = unary();
                       {if (true) return n;}
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("term");
    }
  }

//带运算符的项语法,分为前置和后置
  final public ExprNode unary() throws ParseException {
    trace_call("unary");
    try {
        ExprNode n;
        TypeNode t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 90:
        jj_consume_token(90);
        n = term();
                      {if (true) return new PrefixOpNode("++",n);}
        break;
      case 91:
        jj_consume_token(91);
        n = term();
                       {if (true) return new PrefixOpNode("--",n);}
        break;
      case 87:
        jj_consume_token(87);
        n = term();
                       {if (true) return new UnaryOpNode("-",n);}
        break;
      case 86:
        jj_consume_token(86);
        n = term();
                       {if (true) return new UnaryOpNode("+",n);}
        break;
      case 92:
        jj_consume_token(92);
        n = term();
                       {if (true) return new UnaryOpNode("~",n);}
        break;
      case 93:
        jj_consume_token(93);
        n = term();
                       {if (true) return new UnaryOpNode("!",n);}
        break;
      case 60:
        jj_consume_token(60);
        n = term();
                       {if (true) return new DereferenceNode(n);}
        break;
      case 83:
        jj_consume_token(83);
        n = term();
                       {if (true) return new AddressNode(n);}
        break;
      default:
        jj_la1[40] = jj_gen;
        if (jj_2_23(3)) {
          jj_consume_token(SIZEOF);
          jj_consume_token(51);
          t = type();
          jj_consume_token(52);
                 {if (true) return new SizeofTypeNode(t,size_t());}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SIZEOF:
            jj_consume_token(SIZEOF);
            n = unary();
                 {if (true) return new SizeofExprNode(n,size_t());}
            break;
          case TRUE:
          case FALSE:
          case IDENTIFIER:
          case INTEGER:
          case CHARACTER:
          case STRING:
          case 51:
            n = postfix();
                      {if (true) return n;}
            break;
          default:
            jj_la1[41] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("unary");
    }
  }

//后置运算符语法
  final public ExprNode postfix() throws ParseException {
    trace_call("postfix");
    try {
        ExprNode exp,idx;
        String memb;
        List<ExprNode>args;
      exp = primary();
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 49:
        case 51:
        case 58:
        case 90:
        case 91:
        case 94:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_24;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 91:
          jj_consume_token(91);
                 exp= new SuffixOpNode("--",exp);
          break;
        case 90:
          jj_consume_token(90);
                 exp= new SuffixOpNode("++",exp);
          break;
        case 58:
          jj_consume_token(58);
          idx = expr();
          jj_consume_token(59);
                  exp= new ArefNode(exp,idx);
          break;
        case 49:
          jj_consume_token(49);
          memb = name();
                  exp=new MemberNode(exp,memb);
          break;
        case 94:
          jj_consume_token(94);
          memb = name();
                 exp=new PtrMemberNode(exp,memb);
          break;
        case 51:
          jj_consume_token(51);
          args = args();
          jj_consume_token(52);
                  exp= new FunCallNode(exp,args);
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                 {if (true) return exp;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("postfix");
    }
  }

  final public List<ExprNode > args() throws ParseException {
    trace_call("args");
    try {
        List<ExprNode > args=new ArrayList<ExprNode>();
        ExprNode exp;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case SIZEOF:
      case IDENTIFIER:
      case INTEGER:
      case CHARACTER:
      case STRING:
      case 51:
      case 60:
      case 83:
      case 86:
      case 87:
      case 90:
      case 91:
      case 92:
      case 93:
        exp = expr();
                      args.add(exp);
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_25;
        }
        jj_consume_token(54);
        exp = expr();
                          args.add(exp);
      }
                        {if (true) return args;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("args");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(51)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(52)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(88)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(60)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_149() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(VOID)) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(87)) return true;
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_149()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(86)) return true;
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(85)) return true;
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_3R_145()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_146()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(84)) return true;
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(STRUCT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(UNION)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_3R_143()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_144()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(83)) return true;
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = isType(getToken(1).image);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_81()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(82)) return true;
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_141()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_142()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(51)) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(81)) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_3R_139()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_140()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(58)) return true;
    if (jj_scan_token(INTEGER)) return true;
    if (jj_scan_token(59)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(58)) return true;
    if (jj_scan_token(59)) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(80)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(79)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(78)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_131()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_132()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(77)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(76)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(75)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(74)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_129()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_130()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(73)) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_127()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_128()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(TYPEDEF)) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_122()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_125()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_126()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(71)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(70)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(69)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(68)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(65)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(64)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(63)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_45()) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(53)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(UNION)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_45()) return true;
    if (jj_3R_46()) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(53)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(STRUCT)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(51)) return true;
    if (jj_3R_115()) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(VOID)) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(61)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_38()) return true;
    if (jj_3R_47()) return true;
    if (jj_3R_57()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_59()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_38()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_38()) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(51)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_121()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(51)) return true;
    if (jj_3R_116()) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(EXTERN)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(94)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(49)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(58)) return true;
    if (jj_3R_115()) return true;
    if (jj_scan_token(59)) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(90)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(91)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_100()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_101()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(EXTERN)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(51)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(SIZEOF)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(SIZEOF)) return true;
    if (jj_scan_token(51)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(83)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(60)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(93)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(92)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(86)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(87)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(91)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(90)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(51)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(54)) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_85()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[46];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0xcc000,0x8c000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0xfc0,0x20c000,0x0,0xf9403000,0x0,0xf9403000,0x800000,0x40000000,0x2000000,0x2000000,0xf9403000,0x3000,0x3000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3000,0x0,0x3000,0x0,0x0,0x3000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8,0x20000,0x4,0x4,0x0,0x200000,0x400000,0x200000,0x400000,0x14080000,0x14080000,0x0,0x0,0x400000,0x110d0873,0x40000,0x11090873,0x0,0x0,0x0,0x0,0x110d0873,0x90860,0x10090870,0xc0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x10090870,0x10000000,0x90870,0x40a0000,0x40a0000,0x10090870,0x400000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3cc80000,0x0,0x3cc80000,0x0,0x0,0x0,0x0,0x3cc80000,0x0,0x3cc80000,0xff,0x100,0x200,0x400,0x1f800,0x1f800,0x20000,0x40000,0x80000,0x300000,0x300000,0xc00000,0xc00000,0x3000000,0x3000000,0x3cc80000,0x3cc80000,0x0,0x4c000000,0x4c000000,0x3cc80000,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[23];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[95];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 46; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 95; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 23; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
